db.names.insert({'name':'Richa Patel'});
db.names.findOne()

-----------Backup db in E drive--------
C:\monogodb\bin\dump>mongorestore --port 27017 --db demodb(dbname) --out E:\backup
C:\monogodb\bin\dump>mongorestore --port 27017 --db demodb(dbname) --collection d1(Collecyion name) --out E:\backup
---------------restore db in local---------------
https://www.youtube.com/watch?v=2RApNiXsd-g

1. Command Prompt run as administrator
C:\Windows\system32>cd..

C:\Windows>cd..

C:\>cd monogodb

C:\monogodb>cd bin

C:\monogodb\bin>mongod --dbpath data

2. Command Prompt run as administrator
C:\Windows\system32>cd..

C:\Windows>cd,,
C:\Windows

C:\Windows>cd..

C:\>cd monogodb

C:\monogodb>cd bin

C:\monogodb\bin>mongo localhost/pcat
MongoDB shell version: 3.2.0
connecting to: localhost/pcat

> show dbs
local  0.000GB
> show dbs
local  0.000GB
m101   0.000GB

3. Command Prompt run as administrator
C:\Windows\system32>cd..

C:\Windows>cd..

C:\>cd monogodb

C:\monogodb>cd bin

C:\monogodb\bin>cd dump

C:\monogodb\bin\dump>mongorestore --port 27017 E:\MongoClasses\Week1\files\hw1-1
__m101j_m101p_5258458de2d4233537765336.e116b97d7133\dump
2016-08-03T16:16:05.827+0530    building a list of dbs and collections to restor
e from E:\MongoClasses\Week1\files\hw1-1__m101j_m101p_5258458de2d4233537765336.e
116b97d7133\dump dir
2016-08-03T16:16:05.839+0530    reading metadata for m101.funnynumbers from
2016-08-03T16:16:05.840+0530    reading metadata for m101.hw1 from
2016-08-03T16:16:05.841+0530    restoring m101.hw1 from
2016-08-03T16:16:05.841+0530    restoring m101.funnynumbers from
2016-08-03T16:16:06.013+0530    restoring indexes for collection m101.hw1 from m
etadata
2016-08-03T16:16:06.183+0530    finished restoring m101.hw1 (1 document)
2016-08-03T16:16:06.233+0530    restoring indexes for collection m101.funnynumbe
rs from metadata
2016-08-03T16:16:06.234+0530    finished restoring m101.funnynumbers (100 docume
nts)
2016-08-03T16:16:06.235+0530    done
-------------------------------------------------------------------------------------
Which of the following value types are defined by the JSON spec? Check all that apply.
1.Object
2.array
3.string
4.number

Not valueTypes
1.date
2.integer
--------------------------------------------
Posts
    id
    author_id
    title
    content
    date

Comments
    id
    post_id
    author_id
    content
    date

Tags
    id
    name

Post_Tags
    post_id
    tag_id

Authors
    id
    username
    email
    hashed_password
How many tables need to be accessed to display a blog post (including the author's username) with its comments and tags?
ans:all above table 
----------------------------------------------------------------------------------------------------------------------------
Given the document schema that we proposed for the blog, how many collections would need to be accessed to display a blog post with its comments and tags?
ans:One document is all that is needed.

That's not to say that you couldn't break it up into multiple documents, or that there are no advantages in doing so in some circumstances, but there will also be disadvantages; we'll be talking about this more in other lessons on schema design and data modeling. But only one document is needed.
-----------------------------------------------------------------------------------------------------

In which scenario is it impossible to embed data within a document (you must put the data in a separate collection)?
ans: The embedded data could exceed the 16MB document limit within MongoDB.
-------------------------------------------------------------------


